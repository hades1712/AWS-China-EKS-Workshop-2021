!Tips, all commands here are tested on AMZN Linux 2
1.Prepare EKS cluster yaml file - eksgo04-cluster.yaml
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eksgo04
  region: cn-northwest-1 
  version: "1.19"

managedNodeGroups:
  - name: ng-eksgo04-01
    instanceType: t3.xlarge
    instanceName: ng-eksgo04
    desiredCapacity: 3
    minSize: 1
    maxSize: 8 
    volumeSize: 100
    ssh:
      publicKeyName: key-ningxia-new
      allow: true
      enableSsm: true 
    iam:
      withAddonPolicies:
        ebs: true
        fsx: true
        efs: true

2.Create EKS cluster
eksctl create cluster -f  eksgo04-cluster.yaml

3.Set parameters and get info
export CLUSTER_NAME=eksgo04
export AWS_REGION=cn-northwest-1

Get vpc-id and subnet-id
[ec2-user@ip-172-31-1-111 ~]$ aws eks describe-cluster --name ${CLUSTER_NAME} | jq .cluster.resourcesVpcConfig.subnetIds,.cluster.resourcesVpcConfig.vpcId
[
  "subnet-027e04820f7bb116a",
  "subnet-010b1123cae0aa3a7",
  "subnet-0d388bb9d77d4fa8a",
  "subnet-0aecc3d7f8bae3150",
  "subnet-072caddf70318fc78",
  "subnet-0419f21a3034adedf"
]
"vpc-0454c48d0fcd3254c”

Check Tags related to subnets
[ec2-user@ip-172-31-1-111 ~]$ aws ec2 describe-subnets --filters "Name=subnet-id,Values="subnet-027e04820f7bb116a"" | jq .Subnets[0].Tags
[
  {
    "Key": "aws:cloudformation:stack-id",
    "Value": "arn:aws-cn:cloudformation:cn-northwest-1:<Your_Account_ID>:stack/eksctl-eksgo04-cluster/a052c650-88cb-11eb-8d28-06fd69f21d7a"
  },
  {
    "Key": "kubernetes.io/cluster/eksgo04",
    "Value": "shared"
  },
  {
    "Key": "Name",
    "Value": "eksctl-eksgo04-cluster/SubnetPublicCNNORTHWEST1C"
  },
  {
    "Key": "aws:cloudformation:logical-id",
    "Value": "SubnetPublicCNNORTHWEST1C"
  },
  {
    "Key": "eksctl.cluster.k8s.io/v1alpha1/cluster-name",
    "Value": "eksgo04"
  },
  {
    "Key": "aws:cloudformation:stack-name",
    "Value": "eksctl-eksgo04-cluster"
  },
  {
    "Key": "alpha.eksctl.io/eksctl-version",
    "Value": "0.40.0"
  },
  {
    "Key": "alpha.eksctl.io/cluster-name",
    "Value": "eksgo04"
  },
  {
    "Key": "kubernetes.io/role/elb",
    "Value": "1"
  }
]


Set every subnets in your VPC for EKS cluster to have tag
for NAME in $(aws eks describe-cluster --name ${CLUSTER_NAME} | jq .cluster.resourcesVpcConfig.subnetIds[])
do
  eval aws ec2 create-tags --resources ${NAME} --tags Key="kubernetes.io/cluster/${CLUSTER_NAME}",Value=shared
done

4.To allow the cluster to use AWS Identity and Access Management (IAM) for service accounts, create IAM OIDC provider
View your cluster's OpenID Connect provider URL(OIDC endpoint/URL is used to create an IAM OIDC identity provider for EKS cluster, determining the location of the OpenID Provider )
aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.identity.oidc.issuer" --output text

Example output
https://oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E

List the IAM OIDC providers in your account. 
aws iam list-open-id-connect-providers | grep $(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.identity.oidc.issuer" --output text | awk -F/ '{print $NF}')

Example output
"Arn": "arn:aws:iam::111122223333:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/EXAMPLED539D4633E53DE1B716D3041E"

Create an IAM OIDC identity provider ( Service Provider ) for your cluster with the following command. Replace <cluster_name> (including <>) with your own value.
eksctl utils associate-iam-oidc-provider --cluster=${CLUSTER_NAME} --approve --region ${AWS_REGION}

[ec2-user@ip-172-31-1-111 ekslab]$ eksctl utils associate-iam-oidc-provider --cluster=${CLUSTER_NAME} --approve --region ${AWS_REGION}
2021-03-19 09:28:49 [ℹ]  eksctl version 0.40.0
2021-03-19 09:28:49 [ℹ]  using region cn-northwest-1
2021-03-19 09:28:49 [ℹ]  will create IAM Open ID Connect provider for cluster "eksgo04" in "cn-northwest-1"
2021-03-19 09:28:49 [✔]  created IAM Open ID Connect provider for cluster "eksgo04" in "cn-northwest-1"
[ec2-user@ip-172-31-1-111 ekslab]$ aws iam list-open-id-connect-providers | grep 0C405D0345291397EC0A076666480314
            "Arn": "arn:aws-cn:iam::659702723394:oidc-provider/oidc.eks.cn-northwest-1.amazonaws.com.cn/id/0C405D0345291397EC0A076666480314"

5.Create an IAM policy for the service account using the correct permissions 
curl -OL https://raw.githubusercontent.com/jansony1/cn-container-lab/master/lb-controller/iam-policy-cn.json
curl -OL https://raw.githubusercontent.com/jansony1/cn-container-lab/master/lb-controller/cert-manager.yaml
curl -OL https://raw.githubusercontent.com/jansony1/cn-container-lab/master/lb-controller/lb-controller-v2.yaml

curl -OL https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.1.3/docs/install/iam_policy_cn.json -最新
curl -OL https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.1.0/docs/install/iam_policy_cn.json —doc
curl -OL https://github.com/jetstack/cert-manager/releases/download/v1.0.2/cert-manager.yaml -无不同
curl -OL https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.1.3/docs/install/v2_1_3_full.yaml —用这个
curl -OL https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.1.0/docs/install/v2_1_0_full.yaml

aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam-policy-cn.json

# 记录返回的Plociy ARN
POLICY_NAME=$(aws iam list-policies --query 'Policies[?PolicyName==`AWSLoadBalancerControllerIAMPolicy`].Arn' --output text --region ${AWS_REGION})

6.To create a service account
eksctl create iamserviceaccount \
       --cluster=${CLUSTER_NAME} \
       --namespace=kube-system \
       --name=aws-load-balancer-controller \
       --attach-policy-arn=${POLICY_NAME} \
       --override-existing-serviceaccounts \
       --approve

[ec2-user@ip-172-31-1-111 ekslab]$ eksctl get iamserviceaccount --cluster ${CLUSTER_NAME} --name aws-load-balancer-controller --namespace kube-system
2021-03-19 11:41:16 [ℹ]  eksctl version 0.40.0
2021-03-19 11:41:16 [ℹ]  using region cn-northwest-1
NAMESPACE      NAME                            ROLE ARN
kube-system    aws-load-balancer-controller    arn:aws-cn:iam::659702723394:role/eksctl-eksgo04-addon-iamserviceaccount-kube-Role1-ZKDAVDJ024NV

[ec2-user@ip-172-31-1-111 ekslab]$ kubectl get serviceaccounts --all-namespaces  -o wide | grep aws-load-balancer-controller
kube-system       aws-load-balancer-controller        1         94s

7.Install certManager
修改certManager的yaml文件的image为NWCD维护的China国内镜像源
sed -i 's/quay.io#048912060910.dkr.ecr.cn-northwest-1.amazonaws.com.cn/quay/g' cert-manager.yaml

安装配置certManager，并检查
kubectl apply -f cert-manager.yaml

[ec2-user@ip-172-31-1-111 ekslab]$ kubectl get pods -n cert-manager
NAME                                       READY   STATUS    RESTARTS   AGE
cert-manager-689bbbbd69-jqvph              1/1     Running   0          10s
cert-manager-cainjector-6d89f558bb-hw6q7   1/1     Running   0          10s
cert-manager-webhook-6f46d85b5f-wq7p2      1/1     Running   0          10s

8.Create AWS Load Balance Controller 
修改配置文件中的Cluster Name等
sed -i 's/<Cluster-Name>/${CLUSTER_NAME}/g' lb-controller-v2.yaml
sed -i '/- --ingress-class=alb/ i \\t    - --enable-shield=false\n\t    - --enable-waf=false\n\t    - --enable-wafv2=false' v2_1_3_full.yaml 
sed -i 's/aws-alb-ingress-controller:v2.0.0/aws-alb-ingress-controller:v2.1.3/g' lb-controller-v2.yaml --去除

检查修改好的yaml
[ec2-user@ip-172-31-1-111 ekslab]$ more v2_1_3_full.yaml  | grep -i Cluster-Name -A 5
            - --cluster-name=eksgo04
            - --enable-shield=false
            - --enable-waf=false
            - --enable-wafv2=false
            - --ingress-class=alb
          image: amazon/aws-alb-ingress-controller:v2.1.3

使用修改好的yaml文件部署AWS Load Balance Controller
kubectl apply -f lb-controller-v2.yaml
 
  
检查确认AWS Load Balance Controller是否工作
kubectl logs -n kube-system $(kubectl get po -n kube-system | egrep -o aws-load-balancer-controller[a-zA-Z0-9-]+) | grep -i success

[ec2-user@ip-172-31-1-111 ekslab]$ kubectl logs -n kube-system $(kubectl get po -n kube-system | egrep -o aws-load-balancer-controller[a-zA-Z0-9-]+) | grep -i success
I0319 11:57:51.080612       1 leaderelection.go:252] successfully acquired lease kube-system/aws-load-balancer-controller-leader

9.[Optional]Use Kubernetes mutating admission webhook to automatically replace container images of Kubernetes Pods to the China container image repository maintained by NWCD
kubectl apply -f https://raw.githubusercontent.com/nwcdlabs/container-mirror/master/webhook/mutating-webhook.yaml

10.Create test application 
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.1.3/docs/examples/2048/2048_full.yaml

11.Check Ingress 
[ec2-user@ip-172-31-1-111 ekslab]$ kubectl get ingress -A
Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress
NAMESPACE   NAME           CLASS    HOSTS   ADDRESS                                                                           PORTS   AGE
game-2048   ingress-2048   <none>   *       k8s-game2048-ingress2-20ccadf1ec-1671828624.cn-northwest-1.elb.amazonaws.com.cn   80      46s

12.Check logs if there is an issue 
kubectl logs -n kube-system deployment.apps/aws-load-balancer-controller
 
Reference:
https://docs.amazonaws.cn/eks/latest/userguide/aws-load-balancer-controller.html
https://github.com/kubernetes-sigs/aws-load-balancer-controller
